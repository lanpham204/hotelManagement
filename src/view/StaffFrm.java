/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import dao.StaffDAO;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import model.Staff;
import org.mindrot.jbcrypt.BCrypt;
import util.MsgBox;

/**
 *
 * @author ta2khu75
 */
public class StaffFrm extends javax.swing.JPanel {

    DefaultTableModel tblModel;
    List<Staff> list;
    StaffDAO staffDao = new StaffDAO();

    /**
     * Creates new form JPanel
     */
    public StaffFrm() {
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGender = new javax.swing.ButtonGroup();
        grpRole = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPass = new javax.swing.JPasswordField();
        txtConfir = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtCccd = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        rdoMale = new javax.swing.JRadioButton();
        rdoFemale = new javax.swing.JRadioButton();
        rdoManager = new javax.swing.JRadioButton();
        rdoStaff = new javax.swing.JRadioButton();
        chsBirthday = new com.toedter.calendar.JDateChooser();

        setPreferredSize(new java.awt.Dimension(0, 689));

        jLabel2.setText("Mã nhân viên:");

        btnNew.setBackground(new java.awt.Color(0, 204, 204));
        btnNew.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnNew.setForeground(new java.awt.Color(0, 0, 0));
        btnNew.setText("Mới");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        jLabel3.setText("Mật khẩu:");

        jLabel4.setText("Tên nhân viên:");

        jLabel5.setText("Xác nhân mật khẩu:");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tblStaff.setAutoCreateRowSorter(true);
        tblStaff.setBackground(new java.awt.Color(255, 255, 255));
        tblStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        tblStaff.setForeground(new java.awt.Color(0, 0, 0));
        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Tên", "Cccd", "Giới Tính", "Ngày Sinh", "Số Điện Thoại", "Email", "Vai Trò"
            }
        ));
        tblStaff.setFocusable(false);
        tblStaff.setGridColor(new java.awt.Color(230, 230, 230));
        tblStaff.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tblStaff.setRowHeight(40);
        tblStaff.setShowHorizontalLines(true);
        tblStaff.getTableHeader().setReorderingAllowed(false);
        tblStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStaffMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblStaff);

        btnAdd.setBackground(new java.awt.Color(153, 255, 153));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(0, 0, 0));
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(204, 204, 0));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(0, 0, 0));
        btnEdit.setText("Sửa");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel6.setText("Cccd:");

        jLabel7.setText("Ngày sinh:");

        jLabel8.setText("Email:");

        txtPass.setMinimumSize(new java.awt.Dimension(22, 22));

        txtConfir.setMinimumSize(new java.awt.Dimension(22, 22));

        jLabel9.setText("Giới tính:");

        jLabel10.setText("Số điện thoại:");

        jLabel11.setText("Vai trò:");

        txtCccd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCccdActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        grpGender.add(rdoMale);
        rdoMale.setText("Nam");

        grpGender.add(rdoFemale);
        rdoFemale.setText("Nữ");

        grpRole.add(rdoManager);
        rdoManager.setText("Quản lý");

        grpRole.add(rdoStaff);
        rdoStaff.setText("Nhân viên");
        rdoStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStaffActionPerformed(evt);
            }
        });

        chsBirthday.setDateFormatString("dd/MM/yyyy");
        chsBirthday.setMinSelectableDate(new java.util.Date(-62135791106000L));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(chsBirthday, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addComponent(txtCccd, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPass, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmail)
                            .addComponent(txtId, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rdoFemale, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rdoManager)
                                                .addGap(67, 67, 67)
                                                .addComponent(rdoStaff))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rdoMale)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(txtConfir, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(40, 40, 40)
                                .addComponent(txtName))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(btnAdd)
                        .addGap(31, 31, 31)
                        .addComponent(btnDelete)
                        .addGap(27, 27, 27)
                        .addComponent(btnEdit)
                        .addGap(27, 27, 27)
                        .addComponent(btnNew)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConfir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(rdoMale)
                            .addComponent(rdoFemale))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(rdoManager)
                            .addComponent(rdoStaff)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtCccd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chsBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit)
                    .addComponent(btnNew))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStaffMouseClicked
        // TODO add your handling code here:
        fillForm();
    }//GEN-LAST:event_tblStaffMouseClicked

    private void txtCccdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCccdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCccdActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void rdoStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoStaffActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        insert();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        setWhiteForm();
    }//GEN-LAST:event_btnNewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private com.toedter.calendar.JDateChooser chsBirthday;
    private javax.swing.ButtonGroup grpGender;
    private javax.swing.ButtonGroup grpRole;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdoFemale;
    private javax.swing.JRadioButton rdoMale;
    private javax.swing.JRadioButton rdoManager;
    private javax.swing.JRadioButton rdoStaff;
    private javax.swing.JTable tblStaff;
    private javax.swing.JTextField txtCccd;
    private javax.swing.JPasswordField txtConfir;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
    private void fillTable() {
        list = new StaffDAO().selectAll();
        tblModel.setRowCount(0);
        Iterator<Staff> staff = list.iterator();
        while (staff.hasNext()) {
            Staff s = staff.next();
            tblModel.addRow(new String[]{
                s.getId(), s.getFullName(), s.getDocumentCard(), s.isGender() ? "Nam" : "Nữ", s.getBirthDate() + "", s.getPhoneNum(), s.getEmail(), s.isRole() ? "Quản lý" : "Nhân viên"
            });
        }
        tblModel.fireTableDataChanged();

        setWhiteForm();
    }

    private void setWhiteForm() {
        txtId.setText("");
        txtId.setEditable(true);
        txtName.setText("");
        txtCccd.setText("");
        txtEmail.setText("");
        txtPass.setText("");
        txtConfir.setText("");
        txtPhone.setText("");
        grpGender.clearSelection();
        grpRole.clearSelection();
        chsBirthday.setDate(null);
    }

    public void init() {
        tblModel = (DefaultTableModel) tblStaff.getModel();
        fillTable();
    }

    private Staff checkValue() {
        String id = txtId.getText().trim();
        String name = txtName.getText().trim();
        String pass = new String(txtPass.getPassword()).trim();
        String confir = new String(txtConfir.getPassword()).trim();
        String cccd = txtCccd.getText().trim();
        boolean gender = rdoMale.isSelected() || rdoFemale.isSelected() ? false : true;
        Date date = chsBirthday.getDate();
        String phone = txtPhone.getText().trim();
        String email = txtEmail.getText().trim();
        boolean role = rdoManager.isSelected() || rdoStaff.isSelected() ? false : true;

        if (id.isEmpty() || name.isEmpty() || pass.isEmpty() || confir.isEmpty() || cccd.isEmpty() || date == null || phone.isEmpty() || email.isEmpty() || role || gender) {
            MsgBox.showMessage(this, "Vui lòng nhập đầy đủ thông tin");
            return null;
        }
        if (pass.equals(confir)) {
            Pattern pattern = Pattern.compile("^([A-Z0-9]{9,13})$");
            Matcher matcher = pattern.matcher(cccd);

            if (matcher.matches()) {
                pattern = Pattern.compile("^(03|07|08|09)\\d{8}$");
                matcher = pattern.matcher(phone);
                if (matcher.matches()) {
                    pattern = Pattern.compile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");
                    matcher = pattern.matcher(email);
                    if (matcher.matches()) {
                        if (new Date().getYear() - date.getYear() >= 18) {

                                return new Staff(id, name, date,
                                        rdoMale.isSelected() ? true : false,
                                        cccd, email, phone,
                                        BCrypt.hashpw(pass, BCrypt.gensalt()),
                                        rdoManager.isSelected() ? true : false);

                        } else {
                            MsgBox.showMessage(this, "Ngày sinh không hợp lệ\n"
                                    + "Phải trên 18 tuổi\n"
                                    + "VD hợp lệ: 04/06/2000");
                            return null;
                        }
                    } else {
                        MsgBox.showMessage(this, "Email không hợp lệ\n"
                                + "VD hợp lệ: minh@gmail.com");
                        return null;
                    }

                } else {
                    MsgBox.showMessage(this, "Số điện thoại phải có 10 chữ số\n"
                            + "VD hợp lệ: 0812312312");
                    return null;
                }

            } else {
                MsgBox.showMessage(this, "Căn cước công dân không hợp lệ");
                return null;
            }

        } else {
            MsgBox.showMessage(this, "Mật khẩu phải giống nhau");
            return null;
        }
    }

    private void insert() {
        Staff staff = checkValue();
        if (!checkEmail(staff.getEmail())) {
            if (!exist(staff.getId())) {
                if (staff == null) {
                return;
            }
            try {
                staffDao.insert(staff);
                fillTable();
                MsgBox.showMessage(this, "Thành công");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.showMessage(this, "Thất bại");
            }
            } else {
                MsgBox.showMessage(this, "Mã nhân viên đã tồn tại");
            }
            
        } else {
            MsgBox.showMessage(this, "Email đã tồn tại");
        }

    }

    private void update() {
        Staff staff = checkValue();
        if (!checkEmail(staff.getEmail())) {
   
            if (staff == null) {
                return;
            }
            try {
                staffDao.update(staff);
                fillTable();
                MsgBox.showMessage(this, "Thành công");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.showMessage(this, "Thất bại");
            }
        } else {
            MsgBox.showMessage(this, "Email đã tồn tại");
        }

    }

    private void delete() {
        Staff staff = checkValue();
        if (staff == null) {
            return;
        }
        try {
            staffDao.delete(staff);
            fillTable();
            MsgBox.showMessage(this, "Thành công");
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.showMessage(this, "Thất bại");
        }
    }

    private void fillForm() {
        int row = tblStaff.getSelectedRow();
        txtId.setText(tblModel.getValueAt(row, 0).toString());
        txtName.setText(tblModel.getValueAt(row, 1).toString());
        txtCccd.setText(tblModel.getValueAt(row, 2).toString());
        txtPass.setText(list.get(row).getPassword());
        txtConfir.setText(list.get(row).getPassword());
        if (tblModel.getValueAt(row, 3).equals("Nam")) {
            rdoMale.setSelected(true);
        } else {
            rdoFemale.setSelected(true);
        }
        chsBirthday.setDate(list.get(row).getBirthDate());
        txtPhone.setText(tblModel.getValueAt(row, 5).toString());
        txtEmail.setText(tblModel.getValueAt(row, 6).toString());

        if (tblModel.getValueAt(row, 7).equals("Quản lý")) {
            rdoManager.setSelected(true);
        } else {
            rdoStaff.setSelected(true);
        }
        txtId.setEditable(false);
    }

    private boolean checkEmail(String email) {
        for (Staff staff : list) {
            if (staff.getEmail().equalsIgnoreCase(email)) {
                return true;
            }
        }
        return false;
    }

    private boolean exist(String id) {
        for (Staff staff : list) {
            if (staff.getId().equalsIgnoreCase(id)) {
                return true;
            }
        }
        return false;
    }
}
